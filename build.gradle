buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.avast.gradle:gradle-docker-compose-plugin:0.6.15'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
        classpath 'com.jcabi:jcabi-github:0.33.1'
    }
}

group 'com.avast'
version = version == 'unspecified' ? '1.0-SNAPSHOT' : version

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'maven'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'docker-compose'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "http://downloads.mesosphere.io/maven"
    }
}

task bundle(type: Tar) {
    into("") {
        from project.configurations.runtime
        from project.tasks.jar
    }
}

dockerCompose.isRequiredBy(test)
composeUp.dependsOn(bundle)
dockerCompose.environment.put('APP_VERSION', version)

dockerCompose {
    waitForTcpPortsTimeout = java.time.Duration.ofMinutes(1)
    captureContainersOutput = true
    stopContainers = true
}
test.doFirst {
    dockerCompose.exposeAsSystemProperties(test)
}

ext {
    scalaVersion = '2.12'
    scalaLibraryVersion = '2.12.4'
}

dependencies {
    compileOnly "org.scala-lang:scala-library:${scalaLibraryVersion}"
    compileOnly "org.slf4j:slf4j-api:1.7.10"
    compileOnly "mesosphere.marathon:plugin-interface_2.12:1.6.322"

    compile "com.bettercloud:vault-java-driver:3.0.0"

    testCompile "org.scalatest:scalatest_${scalaVersion}:3.0.5"
    testCompile "junit:junit:4.12"
    testCompile 'org.mockito:mockito-core:2.15.0'
    testCompile 'org.asynchttpclient:async-http-client:2.4.0'
    testCompile 'io.github.openfeign:feign-core:9.5.1'
    testCompile 'io.github.openfeign:feign-gson:9.5.1'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    publish = true
    pkg {
        repo = 'maven'
        name = 'marathon-vault-plugin'
        desc = 'Marathon plugin which injects Vault secrets via environment variables.'
        userOrg = 'avast'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/avast/marathon-vault-plugin.git'
        websiteUrl = 'https://github.com/avast/marathon-vault-plugin'
        issueTrackerUrl = 'https://github.com/avast/marathon-vault-plugin/issues'
        labels = ['marathon', 'vault', 'secrets']
        version {
            name = project.version
            vcsTag = project.version
        }
    }
}

import com.jcabi.github.*
task githubUpload {
    dependsOn tasks.bundle
    doLast {
        new RtGithub(System.getenv("GITHUB_TOKEN")).repos().get(new Coordinates.Simple("avast", "marathon-vault-plugin")).releases().iterate().sort { -it.number() }.find().assets().upload(file(tasks.bundle.archivePath).bytes, 'application/tar+gzip', 'bundle.tar')
    }
}
